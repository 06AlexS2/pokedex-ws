{"file":"/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/application/PokemonService.ts","mappings":"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","names":[],"sources":["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/application/PokemonService.ts"],"sourcesContent":["import Pokemon from \"../domain/Pokemon\";\nimport Id from \"../domain/value_objects/general/Id\";\nimport Name from \"../domain/value_objects/general/Name\";\nimport PokemonRepository from \"../infrastructure/PokemonRepository\";\nimport PokemonType from \"../domain/PokemonType\";\nimport PokemonMove from \"../domain/PokemonMove\";\nimport EffectChance from \"../domain/value_objects/EffectChance\";\nimport MoveAccuracy from \"../domain/value_objects/MoveAccuracy\";\nimport MovePP from \"../domain/value_objects/MovePP\";\nimport MovePower from \"../domain/value_objects/MovePower\";\nimport MovePriority from \"../domain/value_objects/MovePriority\";\nimport ShortEffect from \"../domain/value_objects/ShortEffect\";\nimport MoveEffect from \"../domain/PokemonMoveEffect\";\nimport MoveDamageClass from \"../domain/MoveDamageClass\";\n\nexport default class PokemonService {\n  //methods that will use the repository to get the data\n  constructor(private pokemonRepository: PokemonRepository) {}\n\n  async fetchPokemonFromAPI(pokeName: string): Promise<Pokemon> {\n    const response = await fetch(\n      `https://pokeapi.co/api/v2/pokemon/${pokeName}`\n    );\n    //validate if the request dont throw an error\n    if (response.status !== 200) {\n      return Promise.reject(\"Not a valid pokemon\");\n    }\n    const pokemonData = await response.json();\n    if (!pokemonData) {\n      return Promise.reject(\"Pokemon not found\");\n    }\n    const id = new Id(pokemonData.id);\n    const name = new Name(pokemonData.name);\n    const types: PokemonType[] = pokemonData.types.map((type: any) => {\n      const typeId = new Id(Number.parseInt(type.type.url.split(\"/\")[6]));\n      const typeName = new Name(type.type.name);\n      if (!typeId || !typeName) {\n        return Promise.reject(\"Error fetching the pokemon types\");\n      }\n      return new PokemonType(typeName, typeId);\n    });\n    const moves: PokemonMove[] = [];\n    for (let i = 0; i < Math.min(pokemonData.moves.length, 4); i++) {\n      const move = pokemonData.moves[i];\n      const moveInfo = await fetch(move.move.url);\n      if (!moveInfo) {\n        return Promise.reject(\"Error fetching the move info\");\n      }\n      const moveData = await moveInfo.json(); // Extract JSON data from the response\n      const moveId = new Id(moveData.id); // Access the 'id' property from the moveData\n      const moveName = new Name(moveData.name);\n      const movePower = new MovePower(moveData.power);\n      const movePP = new MovePP(moveData.pp);\n      const movePriority = new MovePriority(moveData.priority);\n      const moveTypeId = new Id(\n        Number.parseInt(moveData.type.url.split(\"/\")[6])\n      );\n      const moveTypeName = new Name(moveData.type.name);\n      if (!moveTypeId || !moveTypeName) {\n        return Promise.reject(\"Error fetching the movement types\");\n      }\n      const moveElementType = new PokemonType(moveTypeName, moveTypeId);\n      const moveAccuracy = new MoveAccuracy(moveData.accuracy);\n      const moveEffect = new MoveEffect(\n        new EffectChance(moveData.effect_chance),\n        new ShortEffect(moveData.effect_entries[0].short_effect)\n      );\n      const moveDamageClass = new MoveDamageClass(\n        new Name(moveData.damage_class.name),\n        new Id(Number.parseInt(moveData.damage_class.url.split(\"/\")[6]))\n      );\n      moves.push(\n        new PokemonMove(\n          moveName,\n          moveId,\n          movePower,\n          movePP,\n          movePriority,\n          moveElementType,\n          moveAccuracy,\n          moveEffect,\n          moveDamageClass\n        )\n      );\n    }\n    const pokemon = new Pokemon(id, name, types, moves);\n    return this.pokemonRepository.catchPokemonIntoDB(pokemon);\n  }\n\n  async setFreeAPokemonById(pokemonId: number): Promise<void> {\n    try {\n      return this.pokemonRepository.releasePokemonById(new Id(pokemonId));\n    } catch (error: any) {\n      throw error;\n    }\n  }\n\n  async setFreeAPokemonByName(pokeName: string): Promise<void> {\n    try {\n      return this.pokemonRepository.releasePokemonByName(new Name(pokeName));\n    } catch (error: any) {\n      throw error;\n    }\n  }\n\n  async showPokedex(): Promise<Pokemon[]> {\n    try {\n      return this.pokemonRepository.getAllPokedexEntries();\n    } catch (error: any) {\n      throw error;\n    }\n  }\n\n  async setFreeManyPokemonByType(pokemonType: string): Promise<void> {\n    try {\n      return this.pokemonRepository.releaseManyPokemonByType(\n        new Name(pokemonType)\n      );\n    } catch (error: any) {\n      throw error;\n    }\n  }\n}\n"],"version":3}