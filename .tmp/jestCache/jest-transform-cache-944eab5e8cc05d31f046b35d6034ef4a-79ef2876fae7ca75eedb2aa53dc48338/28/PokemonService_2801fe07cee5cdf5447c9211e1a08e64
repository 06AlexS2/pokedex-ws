14d73ca25978372ac2b86aa274063453
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Pokemon_1 = __importDefault(require("../domain/Pokemon"));
const Id_1 = __importDefault(require("../domain/value_objects/general/Id"));
const Name_1 = __importDefault(require("../domain/value_objects/general/Name"));
const PokemonType_1 = __importDefault(require("../domain/PokemonType"));
const PokemonMove_1 = __importDefault(require("../domain/PokemonMove"));
const EffectChance_1 = __importDefault(require("../domain/value_objects/EffectChance"));
const MoveAccuracy_1 = __importDefault(require("../domain/value_objects/MoveAccuracy"));
const MovePP_1 = __importDefault(require("../domain/value_objects/MovePP"));
const MovePower_1 = __importDefault(require("../domain/value_objects/MovePower"));
const MovePriority_1 = __importDefault(require("../domain/value_objects/MovePriority"));
const ShortEffect_1 = __importDefault(require("../domain/value_objects/ShortEffect"));
const PokemonMoveEffect_1 = __importDefault(require("../domain/PokemonMoveEffect"));
const MoveDamageClass_1 = __importDefault(require("../domain/MoveDamageClass"));
class PokemonService {
    //methods that will use the repository to get the data
    constructor(pokemonRepository) {
        this.pokemonRepository = pokemonRepository;
    }
    fetchPokemonFromAPI(pokeName) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield fetch(`https://pokeapi.co/api/v2/pokemon/${pokeName}`);
            //validate if the request dont throw an error
            if (response.status !== 200) {
                return Promise.reject("Not a valid pokemon");
            }
            const pokemonData = yield response.json();
            if (!pokemonData) {
                return Promise.reject("Pokemon not found");
            }
            const id = new Id_1.default(pokemonData.id);
            const name = new Name_1.default(pokemonData.name);
            const types = pokemonData.types.map((type) => {
                const typeId = new Id_1.default(Number.parseInt(type.type.url.split("/")[6]));
                const typeName = new Name_1.default(type.type.name);
                if (!typeId || !typeName) {
                    return Promise.reject("Error fetching the pokemon types");
                }
                return new PokemonType_1.default(typeName, typeId);
            });
            const moves = [];
            for (let i = 0; i < Math.min(pokemonData.moves.length, 4); i++) {
                const move = pokemonData.moves[i];
                const moveInfo = yield fetch(move.move.url);
                if (!moveInfo) {
                    return Promise.reject("Error fetching the move info");
                }
                const moveData = yield moveInfo.json(); // Extract JSON data from the response
                const moveId = new Id_1.default(moveData.id); // Access the 'id' property from the moveData
                const moveName = new Name_1.default(moveData.name);
                const movePower = new MovePower_1.default(moveData.power);
                const movePP = new MovePP_1.default(moveData.pp);
                const movePriority = new MovePriority_1.default(moveData.priority);
                const moveTypeId = new Id_1.default(Number.parseInt(moveData.type.url.split("/")[6]));
                const moveTypeName = new Name_1.default(moveData.type.name);
                if (!moveTypeId || !moveTypeName) {
                    return Promise.reject("Error fetching the movement types");
                }
                const moveElementType = new PokemonType_1.default(moveTypeName, moveTypeId);
                const moveAccuracy = new MoveAccuracy_1.default(moveData.accuracy);
                const moveEffect = new PokemonMoveEffect_1.default(new EffectChance_1.default(moveData.effect_chance), new ShortEffect_1.default(moveData.effect_entries[0].short_effect));
                const moveDamageClass = new MoveDamageClass_1.default(new Name_1.default(moveData.damage_class.name), new Id_1.default(Number.parseInt(moveData.damage_class.url.split("/")[6])));
                moves.push(new PokemonMove_1.default(moveName, moveId, movePower, movePP, movePriority, moveElementType, moveAccuracy, moveEffect, moveDamageClass));
            }
            const pokemon = new Pokemon_1.default(id, name, types, moves);
            return this.pokemonRepository.catchPokemonIntoDB(pokemon);
        });
    }
    setFreeAPokemonById(pokemonId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return this.pokemonRepository.releasePokemonById(new Id_1.default(pokemonId));
            }
            catch (error) {
                throw error;
            }
        });
    }
    setFreeAPokemonByName(pokeName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return this.pokemonRepository.releasePokemonByName(new Name_1.default(pokeName));
            }
            catch (error) {
                throw error;
            }
        });
    }
    showPokedex() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return this.pokemonRepository.getAllPokedexEntries();
            }
            catch (error) {
                throw error;
            }
        });
    }
    setFreeManyPokemonByType(pokemonType) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return this.pokemonRepository.releaseManyPokemonByType(new Name_1.default(pokemonType));
            }
            catch (error) {
                throw error;
            }
        });
    }
}
exports.default = PokemonService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,