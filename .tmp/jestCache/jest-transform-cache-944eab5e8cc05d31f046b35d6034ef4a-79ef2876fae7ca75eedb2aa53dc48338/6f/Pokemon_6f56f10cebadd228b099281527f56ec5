ac4a790dec3c3d18ada0f0fd499ef72b
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AggregateRoot_1 = __importDefault(require("../../shared/domain/aggregate/AggregateRoot"));
const Id_1 = __importDefault(require("./value_objects/general/Id"));
const Name_1 = __importDefault(require("./value_objects/general/Name"));
const PokemonType_1 = __importDefault(require("./PokemonType"));
const PokemonMove_1 = __importDefault(require("./PokemonMove"));
const MoveAccuracy_1 = __importDefault(require("./value_objects/MoveAccuracy"));
const MovePP_1 = __importDefault(require("./value_objects/MovePP"));
const MovePower_1 = __importDefault(require("./value_objects/MovePower"));
const MovePriority_1 = __importDefault(require("./value_objects/MovePriority"));
const PokemonMoveEffect_1 = __importDefault(require("./PokemonMoveEffect"));
const MoveDamageClass_1 = __importDefault(require("./MoveDamageClass"));
const EffectChance_1 = __importDefault(require("./value_objects/EffectChance"));
const ShortEffect_1 = __importDefault(require("./value_objects/ShortEffect"));
class Pokemon extends AggregateRoot_1.default {
    constructor(id, name, types, moves) {
        super();
        this.id = id;
        this.name = name;
        this.types = types;
        this.moves = moves;
    }
    toPrimitive() {
        return {
            id: this.id.value,
            name: this.name.value,
            types: this.types.map((type) => {
                return {
                    id: type.getId().value,
                    name: type.getName().value,
                };
            }),
            moves: this.moves.map((move) => {
                return {
                    id: move.getId().value,
                    name: move.getName().value,
                    power: move.getPower().value,
                    pp: move.getPP().value,
                    priority: move.getPriority().value,
                    element_type: {
                        id: move.getElementType().getId().value,
                        name: move.getElementType().getName().value,
                    },
                    accuracy: move.getAccuracy().value,
                    effect: {
                        chance: move.getEffect().chance.value,
                        short_effect: move.getEffect().shortEffect.value,
                    },
                    damage_class: {
                        name: move.getDamageClass().name.value,
                        id: move.getDamageClass().id.value,
                    },
                };
            }),
        };
    }
    static primitiveToAggregate(primitive) {
        return new Pokemon(new Id_1.default(primitive.id), new Name_1.default(primitive.name), primitive.types.map((type) => new PokemonType_1.default(new Name_1.default(type.name), new Id_1.default(type.id))), primitive.moves.map((move) => {
            return new PokemonMove_1.default(new Name_1.default(move.name), new Id_1.default(move.id), new MovePower_1.default(move.power), new MovePP_1.default(move.pp), new MovePriority_1.default(move.priority), new PokemonType_1.default(new Name_1.default(move.element_type.name), new Id_1.default(move.element_type.id)), new MoveAccuracy_1.default(move.accuracy), new PokemonMoveEffect_1.default(new EffectChance_1.default(move.effect.chance), new ShortEffect_1.default(move.effect.short_effect)), new MoveDamageClass_1.default(new Name_1.default(move.damage_class.name), new Id_1.default(move.damage_class.id)));
        }));
    }
    getId() {
        return this.id;
    }
    getName() {
        return this.name;
    }
    getTypes() {
        return this.types;
    }
    getMoves() {
        return this.moves;
    }
}
exports.default = Pokemon;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,