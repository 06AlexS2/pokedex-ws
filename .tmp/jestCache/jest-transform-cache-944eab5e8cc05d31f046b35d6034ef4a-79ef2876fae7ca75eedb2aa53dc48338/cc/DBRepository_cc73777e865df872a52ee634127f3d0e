9d15bf012d3df09719f87041b287ed8e
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("@prisma/client");
const Pokemon_1 = __importDefault(require("../../../domain/Pokemon"));
const Id_1 = __importDefault(require("../../../domain/value_objects/general/Id"));
const Name_1 = __importDefault(require("../../../domain/value_objects/general/Name"));
const PokemonType_1 = __importDefault(require("../../../domain/PokemonType"));
const PokemonMove_1 = __importDefault(require("../../../domain/PokemonMove"));
const PokemonMoveEffect_1 = __importDefault(require("../../../domain/PokemonMoveEffect"));
const EffectChance_1 = __importDefault(require("../../../domain/value_objects/EffectChance"));
const ShortEffect_1 = __importDefault(require("../../../domain/value_objects/ShortEffect"));
const MovePower_1 = __importDefault(require("../../../domain/value_objects/MovePower"));
const MovePP_1 = __importDefault(require("../../../domain/value_objects/MovePP"));
const MovePriority_1 = __importDefault(require("../../../domain/value_objects/MovePriority"));
const MoveAccuracy_1 = __importDefault(require("../../../domain/value_objects/MoveAccuracy"));
const MoveDamageClass_1 = __importDefault(require("../../../domain/MoveDamageClass"));
const prisma = new client_1.PrismaClient();
class SQLiteRepository {
    //refactored
    catchPokemonIntoDB(pokemon) {
        return __awaiter(this, void 0, void 0, function* () {
            //verify if pokemon already exists
            const pokemonExists = yield prisma.pokemon
                .findFirst({
                where: {
                    id: pokemon.getId().getValue(),
                },
            })
                .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
            if (pokemonExists) {
                return Promise.reject(new Error("Pokemon already registered."));
            }
            //if not, insert the pokemon
            if (!pokemonExists) {
                yield prisma.pokemon
                    .create({
                    data: {
                        id: pokemon.getId().getValue(),
                        name: pokemon.getName().getValue(),
                    },
                })
                    .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
            }
            //then, insert the element_types
            for (let pokemonType of pokemon.getTypes()) {
                let pokemonTypeExists = yield prisma.element_types
                    .findFirst({
                    where: {
                        id: pokemonType.getId().getValue(),
                    },
                })
                    .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
                if (!pokemonTypeExists) {
                    yield prisma.element_types
                        .create({
                        data: {
                            id: pokemonType.getId().getValue(),
                            name: pokemonType.getName().getValue(),
                        },
                    })
                        .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
                }
            }
            //then, insert the moves
            for (let move of pokemon.getMoves()) {
                //move_types
                let moveTypeExists = yield prisma.element_types
                    .findFirst({
                    where: {
                        id: move.getElementType().getId().getValue(),
                    },
                })
                    .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
                if (!moveTypeExists) {
                    yield prisma.element_types
                        .create({
                        data: {
                            id: move.getElementType().getId().getValue(),
                            name: move.getElementType().getName().getValue(),
                        },
                    })
                        .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
                }
                //damage_class
                let damageClassExists = yield prisma.damage_classes
                    .findFirst({
                    where: {
                        id: move.getDamageClass().getId().getValue(),
                    },
                })
                    .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
                if (!damageClassExists) {
                    yield prisma.damage_classes
                        .create({
                        data: {
                            id: move.getDamageClass().getId().getValue(),
                            name: move.getDamageClass().getName().getValue(),
                        },
                    })
                        .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
                }
                //then, the move itself
                const moveExists = yield prisma.moves
                    .findFirst({
                    where: {
                        id: move.getId().getValue(),
                    },
                })
                    .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
                if (!moveExists) {
                    yield prisma.moves
                        .create({
                        data: {
                            id: move.getId().getValue(),
                            name: move.getName().getValue(),
                            power: move.getPower().getValue(),
                            pp: move.getPP().getValue(),
                            priority: move.getPriority().getValue(),
                            type_id: move.getElementType().getId().getValue(),
                            accuracy: move.getAccuracy().getValue(),
                            chance: move.getEffect().getChance().getValue(),
                            short_effect: move.getEffect().getShortEffect().getValue(),
                            damage_class_id: move.getDamageClass().getId().getValue(),
                        },
                    })
                        .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
                }
                let pokemonMoveExists = yield prisma.pokemon_moves
                    .findFirst({
                    where: {
                        pokemon_id: pokemon.getId().getValue(),
                        move_id: move.getId().getValue(),
                    },
                })
                    .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
                if (!pokemonMoveExists) {
                    yield prisma.pokemon_moves
                        .create({
                        data: {
                            pokemon_id: pokemon.getId().getValue(),
                            move_id: move.getId().getValue(),
                        },
                    })
                        .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
                }
            }
            //finally, insert the pokemon_types
            for (let pokemonType of pokemon.getTypes()) {
                let pokemonTypeExists = yield prisma.pokemon_types
                    .findFirst({
                    where: {
                        pokemon_id: pokemon.getId().getValue(),
                        type_id: pokemonType.getId().getValue(),
                    },
                })
                    .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
                if (!pokemonTypeExists) {
                    yield prisma.pokemon_types
                        .create({
                        data: {
                            pokemon_id: pokemon.getId().getValue(),
                            type_id: pokemonType.getId().getValue(),
                        },
                    })
                        .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
                }
            }
            //if all goes well, return the promise resolved.
            return Promise.resolve(pokemon);
        });
    }
    releasePokemonById(id) {
        return __awaiter(this, void 0, void 0, function* () {
            //first check if the pokemon even exists in the records
            const pokemonExists = yield prisma.pokemon
                .findFirst({
                where: {
                    id: id.getValue(),
                },
            })
                .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
            if (!pokemonExists) {
                return Promise.reject(new Error("Pokemon not found."));
            }
            //then remove the pokemon_moves
            yield prisma.pokemon_moves
                .deleteMany({
                where: {
                    pokemon_id: id.getValue(),
                },
            })
                .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
            //then remove the pokemon_types
            yield prisma.pokemon_types
                .deleteMany({
                where: {
                    pokemon_id: id.getValue(),
                },
            })
                .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
            //then remove the pokemon
            yield prisma.pokemon
                .delete({
                where: {
                    id: id.getValue(),
                },
            })
                .catch(() => Promise.reject(new Error("error while processing the operation.")));
            return Promise.resolve();
        });
    }
    releasePokemonByName(name) {
        return __awaiter(this, void 0, void 0, function* () {
            //first check if the pokemon even exists in the records
            const pokemonExists = yield prisma.pokemon
                .findFirst({
                where: {
                    name: name.getValue(),
                },
            })
                .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
            if (!pokemonExists) {
                return Promise.reject(new Error("Pokemon not found."));
            }
            //then remove the pokemon_moves
            yield prisma.pokemon_moves
                .deleteMany({
                where: {
                    pokemon_id: pokemonExists.id,
                },
            })
                .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
            //then remove the pokemon_types
            yield prisma.pokemon_types
                .deleteMany({
                where: {
                    pokemon_id: pokemonExists.id,
                },
            })
                .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
            //then remove the pokemon
            yield prisma.pokemon
                .delete({
                where: {
                    id: pokemonExists.id,
                },
            })
                .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
            return Promise.resolve();
        });
    }
    getAllPokedexEntries() {
        return __awaiter(this, void 0, void 0, function* () {
            const pokedex = yield prisma.pokemon
                .findMany()
                .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
            if (!pokedex) {
                return Promise.reject(new Error("No pokemon entries."));
            }
            //build the pokemon array
            const pokemonList = [];
            for (const pokemon of pokedex) {
                const types = yield prisma.pokemon_types
                    .findMany({
                    where: { pokemon_id: pokemon.id },
                })
                    .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
                const moves = yield prisma.pokemon_moves
                    .findMany({
                    where: { pokemon_id: pokemon.id },
                })
                    .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
                const pokemonTypes = [];
                const pokemonMoves = [];
                for (const type of types) {
                    const elementType = yield prisma.element_types
                        .findUnique({
                        where: { id: type.type_id },
                    })
                        .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
                    if (elementType) {
                        const pokemonType = new PokemonType_1.default(new Name_1.default(elementType.name), new Id_1.default(elementType.id));
                        pokemonTypes.push(pokemonType);
                    }
                }
                for (const move of moves) {
                    const moveData = yield prisma.moves
                        .findUnique({
                        where: { id: move.move_id },
                    })
                        .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
                    if (moveData) {
                        const moveElementType = yield prisma.element_types
                            .findUnique({
                            where: { id: moveData.type_id },
                        })
                            .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
                        const damageClass = yield prisma.damage_classes
                            .findUnique({
                            where: { id: moveData.damage_class_id },
                        })
                            .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
                        const effect = new PokemonMoveEffect_1.default(new EffectChance_1.default(moveData.chance), new ShortEffect_1.default(moveData.short_effect));
                        const moveObj = new PokemonMove_1.default(new Name_1.default(moveData.name), new Id_1.default(moveData.id), new MovePower_1.default(moveData.power), new MovePP_1.default(moveData.pp), new MovePriority_1.default(moveData.priority), new PokemonType_1.default(new Name_1.default((moveElementType === null || moveElementType === void 0 ? void 0 : moveElementType.name) || ""), new Id_1.default((moveElementType === null || moveElementType === void 0 ? void 0 : moveElementType.id) || 0)), new MoveAccuracy_1.default(moveData.accuracy), effect, new MoveDamageClass_1.default(new Name_1.default((damageClass === null || damageClass === void 0 ? void 0 : damageClass.name) || ""), new Id_1.default((damageClass === null || damageClass === void 0 ? void 0 : damageClass.id) || 0)));
                        pokemonMoves.push(moveObj);
                    }
                }
                const pokemonObj = new Pokemon_1.default(new Id_1.default(pokemon.id), new Name_1.default(pokemon.name), pokemonTypes, pokemonMoves);
                pokemonList.push(pokemonObj);
            }
            return Promise.resolve(pokemonList);
        });
    }
    releaseManyPokemonByType(type) {
        return __awaiter(this, void 0, void 0, function* () {
            //first check if type exists in db records
            const typeExists = yield prisma.element_types
                .findFirst({
                where: {
                    name: type.getValue(),
                },
            })
                .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
            if (!typeExists) {
                return Promise.reject(new Error("Pokemon Type not found."));
            }
            //if it exists, get all the pokemon that has it
            const pokemonByType = yield prisma.pokemon_types
                .findMany({
                where: {
                    type_id: typeExists.id,
                },
            })
                .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
            if (!pokemonByType) {
                return Promise.reject(new Error("Pokemon not found."));
            }
            for (let pokemon of pokemonByType) {
                //then, with that, first delete the pokemon_moves
                yield prisma.pokemon_moves
                    .deleteMany({
                    where: {
                        pokemon_id: pokemon.pokemon_id,
                    },
                })
                    .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
                //then, delete the pokemon_types
                yield prisma.pokemon_types
                    .deleteMany({
                    where: {
                        pokemon_id: pokemon.pokemon_id,
                    },
                })
                    .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
                //finally, delete the pokemon
                yield prisma.pokemon
                    .delete({
                    where: {
                        id: pokemon.pokemon_id,
                    },
                })
                    .catch((error) => Promise.reject(new Error("Error while processing the operation.")));
            }
            return Promise.resolve();
        });
    }
}
exports.default = SQLiteRepository;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,