{"file":"/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/infrastructure/persistence/SQLite/DBRepository.ts","mappings":"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","names":[],"sources":["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/infrastructure/persistence/SQLite/DBRepository.ts"],"sourcesContent":["import PokemonRepository from \"../../PokemonRepository\";\nimport { PrismaClient } from \"@prisma/client\";\nimport Pokemon from \"../../../domain/Pokemon\";\nimport Id from \"../../../domain/value_objects/general/Id\";\nimport Name from \"../../../domain/value_objects/general/Name\";\nimport PokemonType from \"../../../domain/PokemonType\";\nimport PokemonMove from \"../../../domain/PokemonMove\";\nimport MoveEffect from \"../../../domain/PokemonMoveEffect\";\nimport EffectChance from \"../../../domain/value_objects/EffectChance\";\nimport ShortEffect from \"../../../domain/value_objects/ShortEffect\";\nimport MovePower from \"../../../domain/value_objects/MovePower\";\nimport MovePP from \"../../../domain/value_objects/MovePP\";\nimport MovePriority from \"../../../domain/value_objects/MovePriority\";\nimport MoveAccuracy from \"../../../domain/value_objects/MoveAccuracy\";\nimport MoveDamageClass from \"../../../domain/MoveDamageClass\";\n\nconst prisma = new PrismaClient();\n\nexport default class SQLiteRepository implements PokemonRepository {\n  //refactored\n  async catchPokemonIntoDB(pokemon: Pokemon): Promise<Pokemon> {\n    //verify if pokemon already exists\n    const pokemonExists = await prisma.pokemon\n      .findFirst({\n        where: {\n          id: pokemon.getId().getValue(),\n        },\n      })\n      .catch((error) =>\n        Promise.reject(new Error(\"Error while processing the operation.\"))\n      );\n    if (pokemonExists) {\n      return Promise.reject(new Error(\"Pokemon already registered.\"));\n    }\n    //if not, insert the pokemon\n    if (!pokemonExists) {\n      await prisma.pokemon\n        .create({\n          data: {\n            id: pokemon.getId().getValue(),\n            name: pokemon.getName().getValue(),\n          },\n        })\n        .catch((error) =>\n          Promise.reject(new Error(\"Error while processing the operation.\"))\n        );\n    }\n    //then, insert the element_types\n    for (let pokemonType of pokemon.getTypes()) {\n      let pokemonTypeExists = await prisma.element_types\n        .findFirst({\n          where: {\n            id: pokemonType.getId().getValue(),\n          },\n        })\n        .catch((error) =>\n          Promise.reject(new Error(\"Error while processing the operation.\"))\n        );\n      if (!pokemonTypeExists) {\n        await prisma.element_types\n          .create({\n            data: {\n              id: pokemonType.getId().getValue(),\n              name: pokemonType.getName().getValue(),\n            },\n          })\n          .catch((error) =>\n            Promise.reject(new Error(\"Error while processing the operation.\"))\n          );\n      }\n    }\n    //then, insert the moves\n    for (let move of pokemon.getMoves()) {\n      //move_types\n      let moveTypeExists = await prisma.element_types\n        .findFirst({\n          where: {\n            id: move.getElementType().getId().getValue(),\n          },\n        })\n        .catch((error) =>\n          Promise.reject(new Error(\"Error while processing the operation.\"))\n        );\n      if (!moveTypeExists) {\n        await prisma.element_types\n          .create({\n            data: {\n              id: move.getElementType().getId().getValue(),\n              name: move.getElementType().getName().getValue(),\n            },\n          })\n          .catch((error) =>\n            Promise.reject(new Error(\"Error while processing the operation.\"))\n          );\n      }\n      //damage_class\n      let damageClassExists = await prisma.damage_classes\n        .findFirst({\n          where: {\n            id: move.getDamageClass().getId().getValue(),\n          },\n        })\n        .catch((error) =>\n          Promise.reject(new Error(\"Error while processing the operation.\"))\n        );\n      if (!damageClassExists) {\n        await prisma.damage_classes\n          .create({\n            data: {\n              id: move.getDamageClass().getId().getValue(),\n              name: move.getDamageClass().getName().getValue(),\n            },\n          })\n          .catch((error) =>\n            Promise.reject(new Error(\"Error while processing the operation.\"))\n          );\n      }\n      //then, the move itself\n      const moveExists = await prisma.moves\n        .findFirst({\n          where: {\n            id: move.getId().getValue(),\n          },\n        })\n        .catch((error) =>\n          Promise.reject(new Error(\"Error while processing the operation.\"))\n        );\n      if (!moveExists) {\n        await prisma.moves\n          .create({\n            data: {\n              id: move.getId().getValue(),\n              name: move.getName().getValue(),\n              power: move.getPower().getValue(),\n              pp: move.getPP().getValue(),\n              priority: move.getPriority().getValue(),\n              type_id: move.getElementType().getId().getValue(),\n              accuracy: move.getAccuracy().getValue(),\n              chance: move.getEffect().getChance().getValue(),\n              short_effect: move.getEffect().getShortEffect().getValue(),\n              damage_class_id: move.getDamageClass().getId().getValue(),\n            },\n          })\n          .catch((error) =>\n            Promise.reject(new Error(\"Error while processing the operation.\"))\n          );\n      }\n      let pokemonMoveExists = await prisma.pokemon_moves\n        .findFirst({\n          where: {\n            pokemon_id: pokemon.getId().getValue(),\n            move_id: move.getId().getValue(),\n          },\n        })\n        .catch((error) =>\n          Promise.reject(new Error(\"Error while processing the operation.\"))\n        );\n      if (!pokemonMoveExists) {\n        await prisma.pokemon_moves\n          .create({\n            data: {\n              pokemon_id: pokemon.getId().getValue(),\n              move_id: move.getId().getValue(),\n            },\n          })\n          .catch((error) =>\n            Promise.reject(new Error(\"Error while processing the operation.\"))\n          );\n      }\n    }\n    //finally, insert the pokemon_types\n    for (let pokemonType of pokemon.getTypes()) {\n      let pokemonTypeExists = await prisma.pokemon_types\n        .findFirst({\n          where: {\n            pokemon_id: pokemon.getId().getValue(),\n            type_id: pokemonType.getId().getValue(),\n          },\n        })\n        .catch((error) =>\n          Promise.reject(new Error(\"Error while processing the operation.\"))\n        );\n      if (!pokemonTypeExists) {\n        await prisma.pokemon_types\n          .create({\n            data: {\n              pokemon_id: pokemon.getId().getValue(),\n              type_id: pokemonType.getId().getValue(),\n            },\n          })\n          .catch((error) =>\n            Promise.reject(new Error(\"Error while processing the operation.\"))\n          );\n      }\n    }\n    //if all goes well, return the promise resolved.\n    return Promise.resolve(pokemon);\n  }\n\n  async releasePokemonById(id: Id): Promise<void> {\n    //first check if the pokemon even exists in the records\n    const pokemonExists = await prisma.pokemon\n      .findFirst({\n        where: {\n          id: id.getValue(),\n        },\n      })\n      .catch((error) =>\n        Promise.reject(new Error(\"Error while processing the operation.\"))\n      );\n    if (!pokemonExists) {\n      return Promise.reject(new Error(\"Pokemon not found.\"));\n    }\n    //then remove the pokemon_moves\n    await prisma.pokemon_moves\n      .deleteMany({\n        where: {\n          pokemon_id: id.getValue(),\n        },\n      })\n      .catch((error) =>\n        Promise.reject(new Error(\"Error while processing the operation.\"))\n      );\n    //then remove the pokemon_types\n    await prisma.pokemon_types\n      .deleteMany({\n        where: {\n          pokemon_id: id.getValue(),\n        },\n      })\n      .catch((error) =>\n        Promise.reject(new Error(\"Error while processing the operation.\"))\n      );\n    //then remove the pokemon\n    await prisma.pokemon\n      .delete({\n        where: {\n          id: id.getValue(),\n        },\n      })\n      .catch(() =>\n        Promise.reject(new Error(\"error while processing the operation.\"))\n      );\n    return Promise.resolve();\n  }\n\n  async releasePokemonByName(name: Name): Promise<void> {\n    //first check if the pokemon even exists in the records\n    const pokemonExists = await prisma.pokemon\n      .findFirst({\n        where: {\n          name: name.getValue(),\n        },\n      })\n      .catch((error) =>\n        Promise.reject(new Error(\"Error while processing the operation.\"))\n      );\n    if (!pokemonExists) {\n      return Promise.reject(new Error(\"Pokemon not found.\"));\n    }\n    //then remove the pokemon_moves\n    await prisma.pokemon_moves\n      .deleteMany({\n        where: {\n          pokemon_id: pokemonExists.id,\n        },\n      })\n      .catch((error) =>\n        Promise.reject(new Error(\"Error while processing the operation.\"))\n      );\n\n    //then remove the pokemon_types\n    await prisma.pokemon_types\n      .deleteMany({\n        where: {\n          pokemon_id: pokemonExists.id,\n        },\n      })\n      .catch((error) =>\n        Promise.reject(new Error(\"Error while processing the operation.\"))\n      );\n\n    //then remove the pokemon\n    await prisma.pokemon\n      .delete({\n        where: {\n          id: pokemonExists.id,\n        },\n      })\n      .catch((error) =>\n        Promise.reject(new Error(\"Error while processing the operation.\"))\n      );\n    return Promise.resolve();\n  }\n\n  async getAllPokedexEntries(): Promise<Pokemon[]> {\n    const pokedex = await prisma.pokemon\n      .findMany()\n      .catch((error) =>\n        Promise.reject(new Error(\"Error while processing the operation.\"))\n      );\n\n    if (!pokedex) {\n      return Promise.reject(new Error(\"No pokemon entries.\"));\n    }\n\n    //build the pokemon array\n    const pokemonList: Pokemon[] = [];\n    for (const pokemon of pokedex) {\n      const types = await prisma.pokemon_types\n        .findMany({\n          where: { pokemon_id: pokemon.id },\n        })\n        .catch((error) =>\n          Promise.reject(new Error(\"Error while processing the operation.\"))\n        );\n      const moves = await prisma.pokemon_moves\n        .findMany({\n          where: { pokemon_id: pokemon.id },\n        })\n        .catch((error) =>\n          Promise.reject(new Error(\"Error while processing the operation.\"))\n        );\n      const pokemonTypes: PokemonType[] = [];\n      const pokemonMoves: PokemonMove[] = [];\n\n      for (const type of types) {\n        const elementType = await prisma.element_types\n          .findUnique({\n            where: { id: type.type_id },\n          })\n          .catch((error) =>\n            Promise.reject(new Error(\"Error while processing the operation.\"))\n          );\n        if (elementType) {\n          const pokemonType = new PokemonType(\n            new Name(elementType.name),\n            new Id(elementType.id)\n          );\n          pokemonTypes.push(pokemonType);\n        }\n      }\n\n      for (const move of moves) {\n        const moveData = await prisma.moves\n          .findUnique({\n            where: { id: move.move_id },\n          })\n          .catch((error) =>\n            Promise.reject(new Error(\"Error while processing the operation.\"))\n          );\n        if (moveData) {\n          const moveElementType = await prisma.element_types\n            .findUnique({\n              where: { id: moveData.type_id },\n            })\n            .catch((error) =>\n              Promise.reject(new Error(\"Error while processing the operation.\"))\n            );\n          const damageClass = await prisma.damage_classes\n            .findUnique({\n              where: { id: moveData.damage_class_id },\n            })\n            .catch((error) =>\n              Promise.reject(new Error(\"Error while processing the operation.\"))\n            );\n          const effect = new MoveEffect(\n            new EffectChance(moveData.chance),\n            new ShortEffect(moveData.short_effect)\n          );\n          const moveObj = new PokemonMove(\n            new Name(moveData.name),\n            new Id(moveData.id),\n            new MovePower(moveData.power),\n            new MovePP(moveData.pp),\n            new MovePriority(moveData.priority),\n            new PokemonType(\n              new Name(moveElementType?.name || \"\"),\n              new Id(moveElementType?.id || 0)\n            ),\n            new MoveAccuracy(moveData.accuracy),\n            effect,\n            new MoveDamageClass(\n              new Name(damageClass?.name || \"\"),\n              new Id(damageClass?.id || 0)\n            )\n          );\n          pokemonMoves.push(moveObj);\n        }\n      }\n\n      const pokemonObj = new Pokemon(\n        new Id(pokemon.id),\n        new Name(pokemon.name),\n        pokemonTypes,\n        pokemonMoves\n      );\n      pokemonList.push(pokemonObj);\n    }\n\n    return Promise.resolve(pokemonList);\n  }\n\n  async releaseManyPokemonByType(type: Name): Promise<void> {\n    //first check if type exists in db records\n    const typeExists = await prisma.element_types\n      .findFirst({\n        where: {\n          name: type.getValue(),\n        },\n      })\n      .catch((error) =>\n        Promise.reject(new Error(\"Error while processing the operation.\"))\n      );\n    if (!typeExists) {\n      return Promise.reject(new Error(\"Pokemon Type not found.\"));\n    }\n    //if it exists, get all the pokemon that has it\n    const pokemonByType = await prisma.pokemon_types\n      .findMany({\n        where: {\n          type_id: typeExists.id,\n        },\n      })\n      .catch((error) =>\n        Promise.reject(new Error(\"Error while processing the operation.\"))\n      );\n    if (!pokemonByType) {\n      return Promise.reject(new Error(\"Pokemon not found.\"));\n    }\n    for (let pokemon of pokemonByType) {\n      //then, with that, first delete the pokemon_moves\n      await prisma.pokemon_moves\n        .deleteMany({\n          where: {\n            pokemon_id: pokemon.pokemon_id,\n          },\n        })\n        .catch((error) =>\n          Promise.reject(new Error(\"Error while processing the operation.\"))\n        );\n      //then, delete the pokemon_types\n      await prisma.pokemon_types\n        .deleteMany({\n          where: {\n            pokemon_id: pokemon.pokemon_id,\n          },\n        })\n        .catch((error) =>\n          Promise.reject(new Error(\"Error while processing the operation.\"))\n        );\n      //finally, delete the pokemon\n      await prisma.pokemon\n        .delete({\n          where: {\n            id: pokemon.pokemon_id,\n          },\n        })\n        .catch((error) =>\n          Promise.reject(new Error(\"Error while processing the operation.\"))\n        );\n    }\n    return Promise.resolve();\n  }\n}\n"],"version":3}