[["/Users/alexs2/develop/pokeapi-ws/tests/context/pokemon/pokemon.test.ts",{"fileContent":"import request from \"supertest\";\nimport { app } from \"../../../src\";\n\ndescribe(\"POST /api/v1/catch/pokemon-name/:pokemon\", () => {\n  it(\"responds with a JSON containing the info from a pokemon\", async () => {\n    const pokemonName = \"eevee\"\n    const response = await request(app).post(\n      `/api/v1/catch/pokemon-name/${pokemonName}`\n    );\n    expect(response.status).toBe(201);\n    expect(response.body).toHaveProperty(\"moves\");\n  });\n\n  it(\"responds with a 400 when the pokemon is already registered\", async () => {\n    const nonExistentPokemonName = 'eevee';\n    const response = await request(app).post(\n        `/api/v1/catch/pokemon-name/${nonExistentPokemonName}`\n      );\n    expect(response.status).toBe(400);\n  })\n});\n","resolvedModuleNames":["/Users/alexs2/develop/pokeapi-ws/src/index.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/infrastructure/persistence/SQLite/DBRepository.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/application/PokemonService.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/infrastructure/express/PokemonController.ts"]}],["/Users/alexs2/develop/pokeapi-ws/src/index.ts",{"fileContent":"// src/index.js\nimport express, { Express, Request, Response } from \"express\";\nimport dotenv from \"dotenv\";\nimport SQLiteRepository from \"./context/pokemon/infrastructure/persistence/SQLite/DBRepository\";\nimport PokemonService from \"./context/pokemon/application/PokemonService\";\nimport PokemonController from \"./context/pokemon/infrastructure/express/PokemonController\";\n\ndotenv.config();\n\nexport const app: Express = express();\napp.use(express.json());\n\nconst port = process.env.PORT || 3001;\n\nlet pokemonController: PokemonController;\n\nif (process.env.NODE_ENV === \"development\") {\n  const SQLitePokemonRepository = new SQLiteRepository();\n  const pokemonService = new PokemonService(SQLitePokemonRepository);\n  pokemonController = new PokemonController(pokemonService);\n  app.post(\n    \"/api/v1/catch/pokemon-name/:pokemon\",\n    pokemonController.savePokemonIntoDB.bind(pokemonController)\n  );\n  app.delete(\n    \"/api/set-free/pokemon-id/:id\",\n    pokemonController.releasePokemonById.bind(pokemonController)\n  );\n  app.delete(\n    \"/api/set-free/pokemon-name/:pokemon\",\n    pokemonController.releasePokemonByName.bind(pokemonController)\n  );\n  app.delete(\n    \"/api/set-free/pokemon-type/:type\",\n    pokemonController.releaseManyPokemonByType.bind(pokemonController)\n  );\n  app.get(\n    \"/api/v1/pokedex\",\n    pokemonController.obtainPokedex.bind(pokemonController)\n  );\n}\n\napp.listen(port, () => {\n  console.log(`[server]: Server is running at http://localhost:${port}`);\n});\n","resolvedModuleNames":["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/infrastructure/persistence/SQLite/DBRepository.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/application/PokemonService.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/infrastructure/express/PokemonController.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/infrastructure/PokemonRepository.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/Pokemon.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/general/Id.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/general/Name.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/PokemonType.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/PokemonMove.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/PokemonMoveEffect.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/EffectChance.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/ShortEffect.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MovePower.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MovePP.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MovePriority.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MoveAccuracy.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/MoveDamageClass.ts"]}],["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/infrastructure/persistence/SQLite/DBRepository.ts",{"fileContent":"import PokemonRepository from \"../../PokemonRepository\";\nimport { PrismaClient } from \"@prisma/client\";\nimport Pokemon from \"../../../domain/Pokemon\";\nimport Id from \"../../../domain/value_objects/general/Id\";\nimport Name from \"../../../domain/value_objects/general/Name\";\nimport PokemonType from \"../../../domain/PokemonType\";\nimport PokemonMove from \"../../../domain/PokemonMove\";\nimport MoveEffect from \"../../../domain/PokemonMoveEffect\";\nimport EffectChance from \"../../../domain/value_objects/EffectChance\";\nimport ShortEffect from \"../../../domain/value_objects/ShortEffect\";\nimport MovePower from \"../../../domain/value_objects/MovePower\";\nimport MovePP from \"../../../domain/value_objects/MovePP\";\nimport MovePriority from \"../../../domain/value_objects/MovePriority\";\nimport MoveAccuracy from \"../../../domain/value_objects/MoveAccuracy\";\nimport MoveDamageClass from \"../../../domain/MoveDamageClass\";\n\nconst prisma = new PrismaClient();\n\nexport default class SQLiteRepository implements PokemonRepository {\n  //refactored\n  async catchPokemonIntoDB(pokemon: Pokemon): Promise<Pokemon> {\n    //verify if pokemon already exists\n    const pokemonExists = await prisma.pokemon\n      .findFirst({\n        where: {\n          id: pokemon.getId().getValue(),\n        },\n      })\n      .catch((error) =>\n        Promise.reject(new Error(\"Error while processing the operation.\"))\n      );\n    if (pokemonExists) {\n      return Promise.reject(new Error(\"Pokemon already registered.\"));\n    }\n    //if not, insert the pokemon\n    if (!pokemonExists) {\n      await prisma.pokemon\n        .create({\n          data: {\n            id: pokemon.getId().getValue(),\n            name: pokemon.getName().getValue(),\n          },\n        })\n        .catch((error) =>\n          Promise.reject(new Error(\"Error while processing the operation.\"))\n        );\n    }\n    //then, insert the element_types\n    for (let pokemonType of pokemon.getTypes()) {\n      let pokemonTypeExists = await prisma.element_types\n        .findFirst({\n          where: {\n            id: pokemonType.getId().getValue(),\n          },\n        })\n        .catch((error) =>\n          Promise.reject(new Error(\"Error while processing the operation.\"))\n        );\n      if (!pokemonTypeExists) {\n        await prisma.element_types\n          .create({\n            data: {\n              id: pokemonType.getId().getValue(),\n              name: pokemonType.getName().getValue(),\n            },\n          })\n          .catch((error) =>\n            Promise.reject(new Error(\"Error while processing the operation.\"))\n          );\n      }\n    }\n    //then, insert the moves\n    for (let move of pokemon.getMoves()) {\n      //move_types\n      let moveTypeExists = await prisma.element_types\n        .findFirst({\n          where: {\n            id: move.getElementType().getId().getValue(),\n          },\n        })\n        .catch((error) =>\n          Promise.reject(new Error(\"Error while processing the operation.\"))\n        );\n      if (!moveTypeExists) {\n        await prisma.element_types\n          .create({\n            data: {\n              id: move.getElementType().getId().getValue(),\n              name: move.getElementType().getName().getValue(),\n            },\n          })\n          .catch((error) =>\n            Promise.reject(new Error(\"Error while processing the operation.\"))\n          );\n      }\n      //damage_class\n      let damageClassExists = await prisma.damage_classes\n        .findFirst({\n          where: {\n            id: move.getDamageClass().getId().getValue(),\n          },\n        })\n        .catch((error) =>\n          Promise.reject(new Error(\"Error while processing the operation.\"))\n        );\n      if (!damageClassExists) {\n        await prisma.damage_classes\n          .create({\n            data: {\n              id: move.getDamageClass().getId().getValue(),\n              name: move.getDamageClass().getName().getValue(),\n            },\n          })\n          .catch((error) =>\n            Promise.reject(new Error(\"Error while processing the operation.\"))\n          );\n      }\n      //then, the move itself\n      const moveExists = await prisma.moves\n        .findFirst({\n          where: {\n            id: move.getId().getValue(),\n          },\n        })\n        .catch((error) =>\n          Promise.reject(new Error(\"Error while processing the operation.\"))\n        );\n      if (!moveExists) {\n        await prisma.moves\n          .create({\n            data: {\n              id: move.getId().getValue(),\n              name: move.getName().getValue(),\n              power: move.getPower().getValue(),\n              pp: move.getPP().getValue(),\n              priority: move.getPriority().getValue(),\n              type_id: move.getElementType().getId().getValue(),\n              accuracy: move.getAccuracy().getValue(),\n              chance: move.getEffect().getChance().getValue(),\n              short_effect: move.getEffect().getShortEffect().getValue(),\n              damage_class_id: move.getDamageClass().getId().getValue(),\n            },\n          })\n          .catch((error) =>\n            Promise.reject(new Error(\"Error while processing the operation.\"))\n          );\n      }\n      let pokemonMoveExists = await prisma.pokemon_moves\n        .findFirst({\n          where: {\n            pokemon_id: pokemon.getId().getValue(),\n            move_id: move.getId().getValue(),\n          },\n        })\n        .catch((error) =>\n          Promise.reject(new Error(\"Error while processing the operation.\"))\n        );\n      if (!pokemonMoveExists) {\n        await prisma.pokemon_moves\n          .create({\n            data: {\n              pokemon_id: pokemon.getId().getValue(),\n              move_id: move.getId().getValue(),\n            },\n          })\n          .catch((error) =>\n            Promise.reject(new Error(\"Error while processing the operation.\"))\n          );\n      }\n    }\n    //finally, insert the pokemon_types\n    for (let pokemonType of pokemon.getTypes()) {\n      let pokemonTypeExists = await prisma.pokemon_types\n        .findFirst({\n          where: {\n            pokemon_id: pokemon.getId().getValue(),\n            type_id: pokemonType.getId().getValue(),\n          },\n        })\n        .catch((error) =>\n          Promise.reject(new Error(\"Error while processing the operation.\"))\n        );\n      if (!pokemonTypeExists) {\n        await prisma.pokemon_types\n          .create({\n            data: {\n              pokemon_id: pokemon.getId().getValue(),\n              type_id: pokemonType.getId().getValue(),\n            },\n          })\n          .catch((error) =>\n            Promise.reject(new Error(\"Error while processing the operation.\"))\n          );\n      }\n    }\n    //if all goes well, return the promise resolved.\n    return Promise.resolve(pokemon);\n  }\n\n  async releasePokemonById(id: Id): Promise<void> {\n    //first check if the pokemon even exists in the records\n    const pokemonExists = await prisma.pokemon\n      .findFirst({\n        where: {\n          id: id.getValue(),\n        },\n      })\n      .catch((error) =>\n        Promise.reject(new Error(\"Error while processing the operation.\"))\n      );\n    if (!pokemonExists) {\n      return Promise.reject(new Error(\"Pokemon not found.\"));\n    }\n    //then remove the pokemon_moves\n    await prisma.pokemon_moves\n      .deleteMany({\n        where: {\n          pokemon_id: id.getValue(),\n        },\n      })\n      .catch((error) =>\n        Promise.reject(new Error(\"Error while processing the operation.\"))\n      );\n    //then remove the pokemon_types\n    await prisma.pokemon_types\n      .deleteMany({\n        where: {\n          pokemon_id: id.getValue(),\n        },\n      })\n      .catch((error) =>\n        Promise.reject(new Error(\"Error while processing the operation.\"))\n      );\n    //then remove the pokemon\n    await prisma.pokemon\n      .delete({\n        where: {\n          id: id.getValue(),\n        },\n      })\n      .catch(() =>\n        Promise.reject(new Error(\"error while processing the operation.\"))\n      );\n    return Promise.resolve();\n  }\n\n  async releasePokemonByName(name: Name): Promise<void> {\n    //first check if the pokemon even exists in the records\n    const pokemonExists = await prisma.pokemon\n      .findFirst({\n        where: {\n          name: name.getValue(),\n        },\n      })\n      .catch((error) =>\n        Promise.reject(new Error(\"Error while processing the operation.\"))\n      );\n    if (!pokemonExists) {\n      return Promise.reject(new Error(\"Pokemon not found.\"));\n    }\n    //then remove the pokemon_moves\n    await prisma.pokemon_moves\n      .deleteMany({\n        where: {\n          pokemon_id: pokemonExists.id,\n        },\n      })\n      .catch((error) =>\n        Promise.reject(new Error(\"Error while processing the operation.\"))\n      );\n\n    //then remove the pokemon_types\n    await prisma.pokemon_types\n      .deleteMany({\n        where: {\n          pokemon_id: pokemonExists.id,\n        },\n      })\n      .catch((error) =>\n        Promise.reject(new Error(\"Error while processing the operation.\"))\n      );\n\n    //then remove the pokemon\n    await prisma.pokemon\n      .delete({\n        where: {\n          id: pokemonExists.id,\n        },\n      })\n      .catch((error) =>\n        Promise.reject(new Error(\"Error while processing the operation.\"))\n      );\n    return Promise.resolve();\n  }\n\n  async getAllPokedexEntries(): Promise<Pokemon[]> {\n    const pokedex = await prisma.pokemon\n      .findMany()\n      .catch((error) =>\n        Promise.reject(new Error(\"Error while processing the operation.\"))\n      );\n\n    if (!pokedex) {\n      return Promise.reject(new Error(\"No pokemon entries.\"));\n    }\n\n    //build the pokemon array\n    const pokemonList: Pokemon[] = [];\n    for (const pokemon of pokedex) {\n      const types = await prisma.pokemon_types\n        .findMany({\n          where: { pokemon_id: pokemon.id },\n        })\n        .catch((error) =>\n          Promise.reject(new Error(\"Error while processing the operation.\"))\n        );\n      const moves = await prisma.pokemon_moves\n        .findMany({\n          where: { pokemon_id: pokemon.id },\n        })\n        .catch((error) =>\n          Promise.reject(new Error(\"Error while processing the operation.\"))\n        );\n      const pokemonTypes: PokemonType[] = [];\n      const pokemonMoves: PokemonMove[] = [];\n\n      for (const type of types) {\n        const elementType = await prisma.element_types\n          .findUnique({\n            where: { id: type.type_id },\n          })\n          .catch((error) =>\n            Promise.reject(new Error(\"Error while processing the operation.\"))\n          );\n        if (elementType) {\n          const pokemonType = new PokemonType(\n            new Name(elementType.name),\n            new Id(elementType.id)\n          );\n          pokemonTypes.push(pokemonType);\n        }\n      }\n\n      for (const move of moves) {\n        const moveData = await prisma.moves\n          .findUnique({\n            where: { id: move.move_id },\n          })\n          .catch((error) =>\n            Promise.reject(new Error(\"Error while processing the operation.\"))\n          );\n        if (moveData) {\n          const moveElementType = await prisma.element_types\n            .findUnique({\n              where: { id: moveData.type_id },\n            })\n            .catch((error) =>\n              Promise.reject(new Error(\"Error while processing the operation.\"))\n            );\n          const damageClass = await prisma.damage_classes\n            .findUnique({\n              where: { id: moveData.damage_class_id },\n            })\n            .catch((error) =>\n              Promise.reject(new Error(\"Error while processing the operation.\"))\n            );\n          const effect = new MoveEffect(\n            new EffectChance(moveData.chance),\n            new ShortEffect(moveData.short_effect)\n          );\n          const moveObj = new PokemonMove(\n            new Name(moveData.name),\n            new Id(moveData.id),\n            new MovePower(moveData.power),\n            new MovePP(moveData.pp),\n            new MovePriority(moveData.priority),\n            new PokemonType(\n              new Name(moveElementType?.name || \"\"),\n              new Id(moveElementType?.id || 0)\n            ),\n            new MoveAccuracy(moveData.accuracy),\n            effect,\n            new MoveDamageClass(\n              new Name(damageClass?.name || \"\"),\n              new Id(damageClass?.id || 0)\n            )\n          );\n          pokemonMoves.push(moveObj);\n        }\n      }\n\n      const pokemonObj = new Pokemon(\n        new Id(pokemon.id),\n        new Name(pokemon.name),\n        pokemonTypes,\n        pokemonMoves\n      );\n      pokemonList.push(pokemonObj);\n    }\n\n    return Promise.resolve(pokemonList);\n  }\n\n  async releaseManyPokemonByType(type: Name): Promise<void> {\n    //first check if type exists in db records\n    const typeExists = await prisma.element_types\n      .findFirst({\n        where: {\n          name: type.getValue(),\n        },\n      })\n      .catch((error) =>\n        Promise.reject(new Error(\"Error while processing the operation.\"))\n      );\n    if (!typeExists) {\n      return Promise.reject(new Error(\"Pokemon Type not found.\"));\n    }\n    //if it exists, get all the pokemon that has it\n    const pokemonByType = await prisma.pokemon_types\n      .findMany({\n        where: {\n          type_id: typeExists.id,\n        },\n      })\n      .catch((error) =>\n        Promise.reject(new Error(\"Error while processing the operation.\"))\n      );\n    if (!pokemonByType) {\n      return Promise.reject(new Error(\"Pokemon not found.\"));\n    }\n    for (let pokemon of pokemonByType) {\n      //then, with that, first delete the pokemon_moves\n      await prisma.pokemon_moves\n        .deleteMany({\n          where: {\n            pokemon_id: pokemon.pokemon_id,\n          },\n        })\n        .catch((error) =>\n          Promise.reject(new Error(\"Error while processing the operation.\"))\n        );\n      //then, delete the pokemon_types\n      await prisma.pokemon_types\n        .deleteMany({\n          where: {\n            pokemon_id: pokemon.pokemon_id,\n          },\n        })\n        .catch((error) =>\n          Promise.reject(new Error(\"Error while processing the operation.\"))\n        );\n      //finally, delete the pokemon\n      await prisma.pokemon\n        .delete({\n          where: {\n            id: pokemon.pokemon_id,\n          },\n        })\n        .catch((error) =>\n          Promise.reject(new Error(\"Error while processing the operation.\"))\n        );\n    }\n    return Promise.resolve();\n  }\n}\n","resolvedModuleNames":["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/infrastructure/PokemonRepository.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/Pokemon.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/general/Id.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/general/Name.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/PokemonType.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/PokemonMove.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/PokemonMoveEffect.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/EffectChance.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/ShortEffect.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MovePower.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MovePP.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MovePriority.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MoveAccuracy.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/MoveDamageClass.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/aggregate/AggregateRoot.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/DamageClassName.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/NumberValueObject.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/StringValueObject.ts"]}],["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/Pokemon.ts",{"fileContent":"import AggregateRoot from \"../../shared/domain/aggregate/AggregateRoot\";\nimport Id from \"./value_objects/general/Id\";\nimport Name from \"./value_objects/general/Name\";\nimport PokemonType from \"./PokemonType\";\nimport PokemonMove from \"./PokemonMove\";\nimport DamageClassName from \"./value_objects/DamageClassName\";\nimport MoveAccuracy from \"./value_objects/MoveAccuracy\";\nimport MovePP from \"./value_objects/MovePP\";\nimport MovePower from \"./value_objects/MovePower\";\nimport MovePriority from \"./value_objects/MovePriority\";\nimport MoveEffect from \"./PokemonMoveEffect\";\nimport MoveDamageClass from \"./MoveDamageClass\";\nimport EffectChance from \"./value_objects/EffectChance\";\nimport ShortEffect from \"./value_objects/ShortEffect\";\n\ntype PrimitiveType = {\n  id: number;\n  name: string;\n};\n\ntype PrimitiveEffect = {\n  chance: number;\n  short_effect: string;\n};\n\ntype PrimitiveDamageClass = {\n  name: string;\n  id: number;\n};\n\ntype PrimitiveMove = {\n  id: number;\n  name: string;\n  power: number;\n  pp: number;\n  priority: number;\n  element_type: PrimitiveType;\n  accuracy: number;\n  effect: PrimitiveEffect;\n  damage_class: PrimitiveDamageClass;\n};\n\ntype PokemonPrimitive = {\n  id: number;\n  name: string;\n  types: PrimitiveType[];\n  moves: PrimitiveMove[];\n};\n\nexport default class Pokemon extends AggregateRoot {\n  readonly id: Id;\n  readonly name: Name;\n  readonly types: PokemonType[];\n  readonly moves: PokemonMove[];\n\n  constructor(id: Id, name: Name, types: PokemonType[], moves: PokemonMove[]) {\n    super();\n    this.id = id;\n    this.name = name;\n    this.types = types;\n    this.moves = moves;\n  }\n\n  toPrimitive(): PokemonPrimitive {\n    return {\n      id: this.id.value,\n      name: this.name.value,\n      types: this.types.map((type) => {\n        return {\n          id: type.getId().value,\n          name: type.getName().value,\n        };\n      }),\n      moves: this.moves.map((move) => {\n        return {\n          id: move.getId().value,\n          name: move.getName().value,\n          power: move.getPower().value,\n          pp: move.getPP().value,\n          priority: move.getPriority().value,\n          element_type: {\n            id: move.getElementType().getId().value,\n            name: move.getElementType().getName().value,\n          },\n          accuracy: move.getAccuracy().value,\n          effect: {\n            chance: move.getEffect().chance.value,\n            short_effect: move.getEffect().shortEffect.value,\n          },\n          damage_class: {\n            name: move.getDamageClass().name.value,\n            id: move.getDamageClass().id.value,\n          },\n        };\n      }),\n    };\n  }\n\n  static primitiveToAggregate(primitive: PokemonPrimitive): Pokemon {\n    return new Pokemon(\n      new Id(primitive.id),\n      new Name(primitive.name),\n      primitive.types.map(\n        (type) => new PokemonType(new Name(type.name), new Id(type.id))\n      ),\n      primitive.moves.map((move) => {\n        return new PokemonMove(\n          new Name(move.name),\n          new Id(move.id),\n          new MovePower(move.power),\n          new MovePP(move.pp),\n          new MovePriority(move.priority),\n          new PokemonType(\n            new Name(move.element_type.name),\n            new Id(move.element_type.id)\n          ),\n          new MoveAccuracy(move.accuracy),\n          new MoveEffect(new EffectChance(move.effect.chance), new ShortEffect(move.effect.short_effect)),\n          new MoveDamageClass(new Name(move.damage_class.name), new Id(move.damage_class.id))\n        );\n      })\n    );\n  }\n\n  public getId(): Id {\n    return this.id;\n  }\n\n  public getName(): Name {\n    return this.name;\n  }\n\n  public getTypes(): PokemonType[] {\n    return this.types;\n  }\n\n  public getMoves(): PokemonMove[] {\n    return this.moves;\n  }\n}\n","resolvedModuleNames":["/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/aggregate/AggregateRoot.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/general/Id.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/general/Name.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/PokemonType.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/PokemonMove.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/DamageClassName.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MoveAccuracy.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MovePP.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MovePower.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MovePriority.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/PokemonMoveEffect.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/MoveDamageClass.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/EffectChance.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/ShortEffect.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/NumberValueObject.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/StringValueObject.ts"]}],["/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/aggregate/AggregateRoot.ts",{"fileContent":"export default abstract class AggregateRoot {\n  abstract toPrimitive(): unknown;\n}\n","resolvedModuleNames":[]}],["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/general/Id.ts",{"fileContent":"import NumberValueObject from \"../../../../shared/domain/value_objects/NumberValueObject\";\n\nexport default class Id extends NumberValueObject {}","resolvedModuleNames":["/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/NumberValueObject.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/ValueObject.ts"]}],["/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/NumberValueObject.ts",{"fileContent":"import { isNumber } from \"util\";\nimport ValueObject from \"./ValueObject\";\n\nexport default class NumberValueObject extends ValueObject<number> {\n    constructor(value: number) {\n        super(value || 0);\n        this.ensureIsValidNumber(this.value);\n    }\n\n    public getValue(): number {\n        return this.value;\n    }\n    \n    private ensureIsValidNumber(value: number): void {\n        if (typeof value !== \"number\" || isNaN(value) || !isFinite(value)) {\n            throw new Error('Invalid number');\n        }\n    }\n}","resolvedModuleNames":["/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/ValueObject.ts"]}],["/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/ValueObject.ts",{"fileContent":"export type Primitives = string | string | number | boolean | boolean | null | undefined | Date;\n\nexport default abstract class ValueObject<T extends Primitives> {\n  constructor(readonly value: T) {}\n\n  private ensureIsValueObject(other: ValueObject<T>): void {\n    if (other === null || other === undefined) {\n      throw new Error('ValueObject can not be null or undefined');\n    }\n  }\n\n  equals(other: ValueObject<T>): boolean {\n    return this.value === other.value;\n  }\n\n  toString(): string {\n    return String(this.value);\n  }\n}","resolvedModuleNames":[]}],["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/general/Name.ts",{"fileContent":"import StringValueObject from \"../../../../shared/domain/value_objects/StringValueObject\";\n\nexport default class Name extends StringValueObject {}","resolvedModuleNames":["/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/StringValueObject.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/ValueObject.ts"]}],["/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/StringValueObject.ts",{"fileContent":"import ValueObject from \"./ValueObject\";\n\nexport default class StringValueObject extends ValueObject<string> {\n    constructor(value: string) {\n        super(value);\n        this.ensureIsValidString(value);\n    }\n\n    public getValue(): string {\n        return this.value;\n    }\n    \n    private ensureIsValidString(value: string): void {\n        if (typeof(value) !== \"string\" || value === null || value === undefined) {\n            throw new Error('Invalid string');\n        }\n    }\n}","resolvedModuleNames":["/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/ValueObject.ts"]}],["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/PokemonType.ts",{"fileContent":"import Id from \"./value_objects/general/Id\";\nimport Name from \"./value_objects/general/Name\";\n\nexport default class PokemonType {\n  constructor(private name: Name, private id: Id) {\n    this.name = name;\n    this.id = id;\n  }\n\n  public getName(): Name {\n    return this.name;\n  }\n\n  public getId(): Id {\n    return this.id;\n  }\n}\n","resolvedModuleNames":["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/general/Id.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/general/Name.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/NumberValueObject.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/StringValueObject.ts"]}],["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/PokemonMove.ts",{"fileContent":"import MoveDamageClass from \"./MoveDamageClass\";\nimport MoveEffect from \"./PokemonMoveEffect\";\nimport PokemonType from \"./PokemonType\";\nimport DamageClassName from \"./value_objects/DamageClassName\";\nimport EffectChance from \"./value_objects/EffectChance\";\nimport MoveAccuracy from \"./value_objects/MoveAccuracy\";\nimport MovePP from \"./value_objects/MovePP\";\nimport MovePower from \"./value_objects/MovePower\";\nimport MovePriority from \"./value_objects/MovePriority\";\nimport ShortEffect from \"./value_objects/ShortEffect\";\nimport Id from \"./value_objects/general/Id\";\nimport Name from \"./value_objects/general/Name\";\n\nexport default class PokemonMove {\n    //Move\n    //id: number;\n    //name: string;\n    //power: number;\n    //pp: number;\n    //priority: number;\n    //element_type: element_type;\n    //accuracy: number;\n    //effect: Effect;\n    //damage_class: DamageClass;\n    \n    //MoveEffect:\n    //chance: number;\n    //short_effect: string;  (effect_entries)\n\n    //DamageClass:\n    //name: string;\n    //id: number;\n    constructor(private name: Name, private id: Id, private power: MovePower, private pp: MovePP, private priority: MovePriority, private elementType: PokemonType, private accuracy: MoveAccuracy, private effect: MoveEffect, private damageClass: MoveDamageClass) {\n        this.name = name;\n        this.id = id;\n        this.power = power;\n        this.pp = pp;\n        this.priority = priority;\n        this.elementType = elementType;\n        this.accuracy = accuracy;\n        this.effect = effect;\n        this.damageClass = damageClass;\n    }\n\n    public getName(): Name {\n        return this.name;\n    }\n\n    public getId(): Id {\n        return this.id;\n    }\n    \n    public getPower(): MovePower {\n        return this.power;\n    }\n\n    public getPP(): MovePP {\n        return this.pp;\n    }\n\n    public getPriority(): MovePriority {\n        return this.priority;\n    }\n\n    public getElementType(): PokemonType {\n        return this.elementType;\n    }\n\n    public getAccuracy(): MoveAccuracy {\n        return this.accuracy;\n    }\n\n    public getEffect(): MoveEffect {\n        return this.effect;\n    }\n\n    public getDamageClass(): MoveDamageClass {\n        return this.damageClass;\n    }\n\n    // public toPrimitive() {\n    //     return {\n    //         id: this.id.value,\n    //         name: this.name.value,\n    //         power: this.power.value,\n    //         pp: this.pp.value,\n    //         priority: this.priority.value,\n    //         elementType: {\n    //             id: this.elementType.getId().value,\n    //             name: this.elementType.getName().value\n    //         },\n    //         accuracy: this.accuracy.value,\n    //         effect: {\n    //             chance: this.effect.chance.value,\n    //             description: this.effect.description.value\n    //         },\n    //         damageClass: {\n    //             name: this.damageClass.name.value,\n    //             id: this.damageClass.id.value\n    //         }\n    //     }\n    // }\n}","resolvedModuleNames":["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/MoveDamageClass.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/PokemonMoveEffect.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/PokemonType.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/DamageClassName.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/EffectChance.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MoveAccuracy.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MovePP.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MovePower.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MovePriority.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/ShortEffect.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/general/Id.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/general/Name.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/StringValueObject.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/NumberValueObject.ts"]}],["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MoveAccuracy.ts",{"fileContent":"import NumberValueObject from \"../../../shared/domain/value_objects/NumberValueObject\";\n\nexport default class MoveAccuracy extends NumberValueObject {}","resolvedModuleNames":["/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/NumberValueObject.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/ValueObject.ts"]}],["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MovePP.ts",{"fileContent":"import NumberValueObject from \"../../../shared/domain/value_objects/NumberValueObject\";\n\nexport default class MovePP extends NumberValueObject {}","resolvedModuleNames":["/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/NumberValueObject.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/ValueObject.ts"]}],["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MovePower.ts",{"fileContent":"import NumberValueObject from \"../../../shared/domain/value_objects/NumberValueObject\";\n\nexport default class MovePower extends NumberValueObject {}","resolvedModuleNames":["/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/NumberValueObject.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/ValueObject.ts"]}],["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MovePriority.ts",{"fileContent":"import NumberValueObject from \"../../../shared/domain/value_objects/NumberValueObject\";\n\nexport default class MovePriority extends NumberValueObject {}","resolvedModuleNames":["/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/NumberValueObject.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/ValueObject.ts"]}],["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/PokemonMoveEffect.ts",{"fileContent":"import EffectChance from \"./value_objects/EffectChance\";\nimport ShortEffect from \"./value_objects/ShortEffect\";\n\nexport default class MoveEffect {\n    readonly chance: EffectChance;\n    readonly shortEffect: ShortEffect;\n    constructor(chance: EffectChance, shortEffect: ShortEffect) {\n        this.chance = chance;\n        this.shortEffect = shortEffect;\n    }\n\n    public getChance(): EffectChance {\n        return this.chance;\n    }\n\n    public getShortEffect(): ShortEffect {\n        return this.shortEffect;\n    }\n}","resolvedModuleNames":["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/EffectChance.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/ShortEffect.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/NumberValueObject.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/StringValueObject.ts"]}],["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/MoveDamageClass.ts",{"fileContent":"import Id from \"./value_objects/general/Id\";\nimport MoveDamageName from \"./value_objects/DamageClassName\";\nimport Name from \"./value_objects/general/Name\";\n\n\nexport default class MoveDamageClass {\n    readonly name: Name;\n    readonly id: Id;\n    constructor(name: Name, id: Id) {\n        this.name = name;\n        this.id = id;\n    }\n\n    public getName(): Name {\n        return this.name;\n    }\n\n    public getId(): Id {\n        return this.id;\n    }\n}","resolvedModuleNames":["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/general/Id.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/DamageClassName.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/general/Name.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/NumberValueObject.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/StringValueObject.ts"]}],["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/EffectChance.ts",{"fileContent":"import NumberValueObject from \"../../../shared/domain/value_objects/NumberValueObject\";\n\nexport default class EffectChance extends NumberValueObject {}","resolvedModuleNames":["/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/NumberValueObject.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/ValueObject.ts"]}],["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/ShortEffect.ts",{"fileContent":"import StringValueObject from \"../../../shared/domain/value_objects/StringValueObject\";\n\nexport default class ShortEffect extends StringValueObject {}\n","resolvedModuleNames":["/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/StringValueObject.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/ValueObject.ts"]}],["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/application/PokemonService.ts",{"fileContent":"import Pokemon from \"../domain/Pokemon\";\nimport Id from \"../domain/value_objects/general/Id\";\nimport Name from \"../domain/value_objects/general/Name\";\nimport PokemonRepository from \"../infrastructure/PokemonRepository\";\nimport PokemonType from \"../domain/PokemonType\";\nimport PokemonMove from \"../domain/PokemonMove\";\nimport EffectChance from \"../domain/value_objects/EffectChance\";\nimport MoveAccuracy from \"../domain/value_objects/MoveAccuracy\";\nimport MovePP from \"../domain/value_objects/MovePP\";\nimport MovePower from \"../domain/value_objects/MovePower\";\nimport MovePriority from \"../domain/value_objects/MovePriority\";\nimport ShortEffect from \"../domain/value_objects/ShortEffect\";\nimport MoveEffect from \"../domain/PokemonMoveEffect\";\nimport MoveDamageClass from \"../domain/MoveDamageClass\";\n\nexport default class PokemonService {\n  //methods that will use the repository to get the data\n  constructor(private pokemonRepository: PokemonRepository) {}\n\n  async fetchPokemonFromAPI(pokeName: string): Promise<Pokemon> {\n    const response = await fetch(\n      `https://pokeapi.co/api/v2/pokemon/${pokeName}`\n    );\n    //validate if the request dont throw an error\n    if (response.status !== 200) {\n      return Promise.reject(\"Not a valid pokemon\");\n    }\n    const pokemonData = await response.json();\n    if (!pokemonData) {\n      return Promise.reject(\"Pokemon not found\");\n    }\n    const id = new Id(pokemonData.id);\n    const name = new Name(pokemonData.name);\n    const types: PokemonType[] = pokemonData.types.map((type: any) => {\n      const typeId = new Id(Number.parseInt(type.type.url.split(\"/\")[6]));\n      const typeName = new Name(type.type.name);\n      if (!typeId || !typeName) {\n        return Promise.reject(\"Error fetching the pokemon types\");\n      }\n      return new PokemonType(typeName, typeId);\n    });\n    const moves: PokemonMove[] = [];\n    for (let i = 0; i < Math.min(pokemonData.moves.length, 4); i++) {\n      const move = pokemonData.moves[i];\n      const moveInfo = await fetch(move.move.url);\n      if (!moveInfo) {\n        return Promise.reject(\"Error fetching the move info\");\n      }\n      const moveData = await moveInfo.json(); // Extract JSON data from the response\n      const moveId = new Id(moveData.id); // Access the 'id' property from the moveData\n      const moveName = new Name(moveData.name);\n      const movePower = new MovePower(moveData.power);\n      const movePP = new MovePP(moveData.pp);\n      const movePriority = new MovePriority(moveData.priority);\n      const moveTypeId = new Id(\n        Number.parseInt(moveData.type.url.split(\"/\")[6])\n      );\n      const moveTypeName = new Name(moveData.type.name);\n      if (!moveTypeId || !moveTypeName) {\n        return Promise.reject(\"Error fetching the movement types\");\n      }\n      const moveElementType = new PokemonType(moveTypeName, moveTypeId);\n      const moveAccuracy = new MoveAccuracy(moveData.accuracy);\n      const moveEffect = new MoveEffect(\n        new EffectChance(moveData.effect_chance),\n        new ShortEffect(moveData.effect_entries[0].short_effect)\n      );\n      const moveDamageClass = new MoveDamageClass(\n        new Name(moveData.damage_class.name),\n        new Id(Number.parseInt(moveData.damage_class.url.split(\"/\")[6]))\n      );\n      moves.push(\n        new PokemonMove(\n          moveName,\n          moveId,\n          movePower,\n          movePP,\n          movePriority,\n          moveElementType,\n          moveAccuracy,\n          moveEffect,\n          moveDamageClass\n        )\n      );\n    }\n    const pokemon = new Pokemon(id, name, types, moves);\n    return this.pokemonRepository.catchPokemonIntoDB(pokemon);\n  }\n\n  async setFreeAPokemonById(pokemonId: number): Promise<void> {\n    try {\n      return this.pokemonRepository.releasePokemonById(new Id(pokemonId));\n    } catch (error: any) {\n      throw error;\n    }\n  }\n\n  async setFreeAPokemonByName(pokeName: string): Promise<void> {\n    try {\n      return this.pokemonRepository.releasePokemonByName(new Name(pokeName));\n    } catch (error: any) {\n      throw error;\n    }\n  }\n\n  async showPokedex(): Promise<Pokemon[]> {\n    try {\n      return this.pokemonRepository.getAllPokedexEntries();\n    } catch (error: any) {\n      throw error;\n    }\n  }\n\n  async setFreeManyPokemonByType(pokemonType: string): Promise<void> {\n    try {\n      return this.pokemonRepository.releaseManyPokemonByType(\n        new Name(pokemonType)\n      );\n    } catch (error: any) {\n      throw error;\n    }\n  }\n}\n","resolvedModuleNames":["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/Pokemon.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/general/Id.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/general/Name.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/infrastructure/PokemonRepository.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/PokemonType.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/PokemonMove.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/EffectChance.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MoveAccuracy.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MovePP.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MovePower.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MovePriority.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/ShortEffect.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/PokemonMoveEffect.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/MoveDamageClass.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/aggregate/AggregateRoot.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/DamageClassName.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/NumberValueObject.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/value_objects/StringValueObject.ts"]}],["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/infrastructure/express/PokemonController.ts",{"fileContent":"import { Request, Response } from \"express\";\nimport PokemonService from \"../../application/PokemonService\";\nimport Pokemon from \"../../domain/Pokemon\";\n\nexport default class PokemonController {\n  constructor(private pokemonService: PokemonService) {}\n\n  async savePokemonIntoDB(req: Request, res: Response) {\n    const { pokemon } = req.params;\n    try {\n      const fetchedPokemon: Pokemon =\n        await this.pokemonService.fetchPokemonFromAPI(pokemon);\n      res.status(201).json(fetchedPokemon.toPrimitive());\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  }\n\n  async releasePokemonById(req: Request, res: Response) {\n    const { id } = req.params;\n    const parsedId: number = parseInt(id, 10);\n    try {\n      await this.pokemonService.setFreeAPokemonById(parsedId);\n      res.status(204).send({ message: \"pokemon deleted successfully.\" });\n    } catch (error: any) {\n      res.status(404).json({ message: error.message });\n    }\n  }\n\n  async releasePokemonByName(req: Request, res: Response) {\n    const { pokemon } = req.params;\n    try {\n      await this.pokemonService.setFreeAPokemonByName(pokemon);\n      res.status(204).send({ message: \"pokemon deleted successfully.\" });\n    } catch (error: any) {\n      res.status(404).json({ message: error.message });\n    }\n  }\n\n  async obtainPokedex(req: Request, res: Response) {\n    try {\n      const fetchedPokemon: Pokemon[] = await this.pokemonService.showPokedex();\n      const pokedex: any[] = [];\n      for (const pokemon of fetchedPokemon) {\n        pokedex.push(pokemon.toPrimitive());\n      }\n      res.status(200).json(pokedex);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  }\n\n  async releaseManyPokemonByType(req: Request, res: Response) {\n    const { type } = req.params;\n    try {\n      await this.pokemonService.setFreeManyPokemonByType(type);\n      res.status(204).send({ message: \"pokemon deleted successfully.\" });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  }\n}\n","resolvedModuleNames":["/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/application/PokemonService.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/Pokemon.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/general/Id.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/general/Name.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/infrastructure/PokemonRepository.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/PokemonType.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/PokemonMove.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/EffectChance.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MoveAccuracy.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MovePP.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MovePower.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/MovePriority.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/ShortEffect.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/PokemonMoveEffect.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/MoveDamageClass.ts","/Users/alexs2/develop/pokeapi-ws/src/context/shared/domain/aggregate/AggregateRoot.ts","/Users/alexs2/develop/pokeapi-ws/src/context/pokemon/domain/value_objects/DamageClassName.ts"]}]]